// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String // Changed from Int to String to match User.id
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String // Changed from Int to String to match User.id
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts     Account[]
  sessions     Session[]
  jobs         Job[]         @relation("postedJobs")
  applications Application[]
}

model Job {
  id           Int           @id @default(autoincrement())
  title        String
  company      String
  location     String?
  type         String?
  description  String        @db.Text
  salary       Int?
  postedAt     DateTime      @default(now())
  postedBy     User          @relation("postedJobs", fields: [postedById], references: [id], onDelete: Cascade)
  postedById   String
  applications Application[]
}

model Application {
  id        Int      @id @default(autoincrement())
  jobId     Int
  userId    String
  status    String   @default("pending")
  appliedAt DateTime @default(now())

  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([jobId, userId])
}
